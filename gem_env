#!/usr/bin/env bash

gem_env=~/.gem_env

if [[ ! -d $gem_env ]]; then
    mkdir $gem_env
fi

function gem_env
{
    case "$1" in
	'usage')
	    cat <<-EOF
		gem_env usage|use|create|list|reset name
EOF
	    ;;
	'use')
	    typeset env_name="$2"

	    if [[ ! -d $gem_env/$env_name ]]; then
		echo $gem_env 'does not exist'
	    else
		if type gem_env_reset > /dev/null 2>&1; then
		    gem_env_reset
		fi
		eval 'function gem_env_reset
		{
		    export GEM_HOME='$GEM_HOME'
		    export PATH='$PATH'
		    export PS1="'$PS1'"
		    export GEM_ENV_NAME="'$GEM_ENV_NAME'"
		}'
		export GEM_HOME=$gem_env/$env_name
		export PATH=$GEM_HOME/bin:$PATH
		export PS1="($env_name)$PS1"
		export GEM_ENV_NAME=$env_name
	    fi
	    ;;
	'create')
	    typeset env_name="$2"

	    if [[ ! -d $gem_env/$env_name ]]; then
		mkdir -p $gem_env/$env_name
		gem_env 'use' $env_name
	    else
		echo $gem_env 'already exists'
		return
	    fi
	    ;;
	'list')
	    for d in $gem_env/*; do
		if [[ -d $d ]]; then
		    if [[ $(basename $d) = $GEM_ENV_NAME ]]; then
			current="(current)"
		    else
			current=""
		    fi
		    echo -e $(basename $d) '\t' $d '\t' $current
		fi
	    done
	    ;;
	'reset')
	    if type gem_env_reset > /dev/null 2>&1; then
		gem_env_reset
	    else
		echo 'Nothing to reset!'
	    fi
	    ;;
	*)
	    gem_env usage
	    ;;
    esac
}

if [[ ! -z "$@" ]]; then
    set -x
    gem_env $@
    set +x
fi

alias 'gemenv-use=gem_env use' 
alias 'gemenv-create=gem_env create' 
alias 'gemenv-list=gem_env list' 
alias 'gemenv-exit=gem_env reset' 
